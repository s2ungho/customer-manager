# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common.system_protos.basic_system_call_pb2 as basic__system__call__pb2


class BasicSystemCallStub(object):
    """rpc SystemRequest (RequestMessage) returns (SystemResponse);
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SystemRequest = channel.unary_unary(
                '/kornic.sf.communication.rpc.BasicSystemCall/SystemRequest',
                request_serializer=basic__system__call__pb2.RequestMessage.SerializeToString,
                response_deserializer=basic__system__call__pb2.SystemResponse.FromString,
                )
        self.RequestLink = channel.unary_unary(
                '/kornic.sf.communication.rpc.BasicSystemCall/RequestLink',
                request_serializer=basic__system__call__pb2.Empty.SerializeToString,
                response_deserializer=basic__system__call__pb2.SystemResponse.FromString,
                )


class BasicSystemCallServicer(object):
    """rpc SystemRequest (RequestMessage) returns (SystemResponse);
    """

    def SystemRequest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLink(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasicSystemCallServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SystemRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.SystemRequest,
                    request_deserializer=basic__system__call__pb2.RequestMessage.FromString,
                    response_serializer=basic__system__call__pb2.SystemResponse.SerializeToString,
            ),
            'RequestLink': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestLink,
                    request_deserializer=basic__system__call__pb2.Empty.FromString,
                    response_serializer=basic__system__call__pb2.SystemResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kornic.sf.communication.rpc.BasicSystemCall', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BasicSystemCall(object):
    """rpc SystemRequest (RequestMessage) returns (SystemResponse);
    """

    @staticmethod
    def SystemRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kornic.sf.communication.rpc.BasicSystemCall/SystemRequest',
            basic__system__call__pb2.RequestMessage.SerializeToString,
            basic__system__call__pb2.SystemResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kornic.sf.communication.rpc.BasicSystemCall/RequestLink',
            basic__system__call__pb2.Empty.SerializeToString,
            basic__system__call__pb2.SystemResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
